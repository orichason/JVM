using System.Drawing;
using System.Security.AccessControl;
using System;
using JVM;
using JVMLibrary.Extensions;
using JVMLibrary.Attribute_Infos;
using System.Reflection;

namespace JVMLibrary.Method_Infos
{
    public class Method_Info
    {
        public ushort AccessFlag { get; internal set; }

        public ushort NameIndex { get; internal set; }
        public ushort DescriptorIndex { get; internal set; }
        public ushort AttributesCount { get; internal set; }

        public Attribute_Info[] Attributes { get; internal set; }
        public Method_Info(ref ReadOnlySpan<byte> byteCode)
        {
            Parse(ref byteCode);
        }

        [Flags]
        public enum AccessFlags
        {
            ACC_PUBLIC = 0x0001, //Declared public; may be accessed from outside its package.
            ACC_PRIVATE = 0x0002, // Declared private; accessible only within the defining class.
            ACC_PROTECTED = 0x0004, //Declared protected; may be accessed within subclasses.
            ACC_STATIC = 0x0008, //ACC_STATIC	0x0008	Declared static.
            ACC_FINAL = 0x0010, // Declared final; must not be overridden (§5.4.5).
            ACC_SYNCHRONIZED = 0x0020, // Declared synchronized; invocation is wrapped by a monitor use.
            ACC_BRIDGE = 0x0040, //A bridge method, generated by the compiler.
            ACC_VARARGS = 0x0080, //Declared with variable number of arguments.
            ACC_NATIVE = 0x0100, //Declared native; implemented in a language other than Java.
            ACC_ABSTRACT = 0x0400, //Declared abstract; no implementation is provided.
            ACC_STRICT = 0x0800, //Declared strictfp; floating - point mode is FP - strict.
            ACC_SYNTHETIC = 0x1000 //Declared synthetic; not present in the source code.
        }
        
        public void Parse(ref ReadOnlySpan<byte> byteCode)
        {
            AccessFlag = byteCode.SliceU2();
            NameIndex = (ushort)(byteCode.SliceU2() - 1);
            DescriptorIndex = (ushort)(byteCode.SliceU2() - 1);
            AttributesCount = byteCode.SliceU2();
        }
    }
}

